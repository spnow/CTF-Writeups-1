#include <bitset>
#include <cstdint>
#include <ctime>
#include <iostream>
#include <string>
#include <vector>
using namespace std;

bool inner(const bitset<91>& a, const bitset<91>& b) {
	return ((a & b)).count() & 1;
}

bool check_byte(const bitset<91>& s, vector<unsigned char>& final_s, int cur_byte) {
	unsigned char final_char = 'A';
	for (int j = 0; j < 7; j++) {
		final_char ^= s[(7 * cur_byte + j)] << (6 - j);
	}

	if (!(isalnum(final_char))) {
		return false;
	}
	final_s[12 - cur_byte] = final_char;
	return true;
}

const string vec2string(const vector<unsigned char>& st) {
	string a;
	for (size_t i = 0; i < st.size(); i++) {
		a += st[i];
	}
	return a;
}

int main() {
	const vector<bitset<91>> m{
	bitset<91>{"1001111011100001000001000110111000000110001110101011101101010100001010110011110111000110010"},
	bitset<91>{"0101000110010011100000100101000100000101000001111110011001111110001111001010001100100101011"},
	bitset<91>{"0010100101111011111110001001100000101000010110011010010000110001100111111010010100010111001"},
	bitset<91>{"0001010010111101111110000100010000000100001011001101001010011001110011011101011010001011100"},
	bitset<91>{"0000101010110100110110010100001011101101100100010011010110000100001001111110000110000110100"},
	bitset<91>{"0000010000000010011101000111000100110011101101011001000100000101010100010000101010001101100"},
	bitset<91>{"0000001110110001000001111000100000100011000000001001111100001100001010110111000111000011010"},
	bitset<91>{"0000000110000000100110110001010001000100111111010000010011000000010101010100001010101111011"},
	bitset<91>{"0000000010110000001110011011000010101010111110100001011110001110100000011111010010001101100"},
	bitset<91>{"0000000001010100111000101110111100011000010011110110100100110100100010010011001000110110101"},
	bitset<91>{"0000000000101000011010001110001011011101110110011101111000101001111010011010101110011100111"},
	bitset<91>{"0000000000011010110001101000010010000011000000011011100000111110011010101000000011111101110"},
	bitset<91>{"0000000000001101001001011101001000110010010010100110001000101110110011000010010110110111010"},
	bitset<91>{"0000000000000101010011010000010001110110010111010111000101001010011000111111101100011100100"},
	bitset<91>{"0000000000000011100001001110000001011101010011001101010011011111010100011011111010000001001"},
	bitset<91>{"0000000000000001001111010001110011111000100111110000000111101101011111111000111111100111110"},
	bitset<91>{"0000000000000000101010100100100010011011110100011100110111111101011001100110000011000101100"},
	bitset<91>{"0000000000000000010001011110110011000110101101110010111111001110001000001011000000010111110"},
	bitset<91>{"0000000000000000001000011001000100010110101111110001001001100001001000110000100011111010000"},
	bitset<91>{"0000000000000000000110011001010101000001111111100110101010110010101011110011001010000111101"},
	bitset<91>{"0000000000000000000010100011101010111111011001010010011000000101000011111110001000000011010"},
	bitset<91>{"0000000000000000000001111111011010000000100100011001010010100110001101010000101101100110101"},
	bitset<91>{"0000000000000000000000100110001011100010111011110110011110111010001111001010000100101110111"},
	bitset<91>{"0000000000000000000000011100101101110111000110011010101001000000100001000001110101001111100"},
	bitset<91>{"0000000000000000000000001001110110101011111111101000100001000111010000111000101101001001001"},
	bitset<91>{"0000000000000000000000000111011001101101000010001000110000100101111101011011000000110010100"},
	bitset<91>{"0000000000000000000000000011000100100110101001010000111100010101001111000010111110011101100"},
	bitset<91>{"0000000000000000000000000001001110001011011100101110001001001100111111001001001000110111111"},
	bitset<91>{"0000000000000000000000000000110010100000111000111100010100100010111010001111110100111110101"},
	bitset<91>{"0000000000000000000000000000010110011011001100101010100011000000001110011001100111000101100"},
	bitset<91>{"0000000000000000000000000000001010011000101010011101000000100100111111011000011000111111010"},
	bitset<91>{"0000000000000000000000000000000111101000101100101100111111001001110100101100000100101011000"},
	bitset<91>{"0000000000000000000000000000000011100001010001010110011011101011101110010111111111110010100"},
	bitset<91>{"0000000000000000000000000000000001111001110100100110101001111101001011010000100100100101001"},
	bitset<91>{"0000000000000000000000000000000000100001000110010011101011111010111010111110111000011000101"},
	bitset<91>{"0000000000000000000000000000000000010000101110001001001111001110100000100011011100000010010"},
	bitset<91>{"0000000000000000000000000000000000001000011000001101001110110110010110001000001011100001011"},
	bitset<91>{"0000000000000000000000000000000000000100100010110100110101001011110101100001111100110100011"},
	bitset<91>{"0000000000000000000000000000000000000011001000000001111000001001000111100000001101100111000"},
	bitset<91>{"0000000000000000000000000000000000000001111000100000011001101100000101101100101111010001101"},
	bitset<91>{"0000000000000000000000000000000000000000110001010000110110000101111111101010010111100110110"},
	bitset<91>{"0000000000000000000000000000000000000000010011010101000101100000000110000000101001111101110"},
	bitset<91>{"0000000000000000000000000000000000000000001110100000011101100111111101111010100001101111100"},
	bitset<91>{"0000000000000000000000000000000000000000000111011010010110100110000000011000000111000111011"},
	bitset<91>{"0000000000000000000000000000000000000000000011110010000010100100001001101100000001000010111"},
	bitset<91>{"0000000000000000000000000000000000000000000001010101100001111011011100110001000111001000110"},
	bitset<91>{"0000000000000000000000000000000000000000000000100011000000101110101111000101100111010110111"},
	bitset<91>{"0000000000000000000000000000000000000000000000011010011010010111101110011101101101101000001"},
	bitset<91>{"0000000000000000000000000000000000000000000000001000010010110111011000110110100001100001000"},
	bitset<91>{"0000000000000000000000000000000000000000000000000111000111011010011010100101111110110101101"},
	bitset<91>{"0000000000000000000000000000000000000000000000000010000111101101101011110110010001011110101"},
	bitset<91>{"0000000000000000000000000000000000000000000000000001111111111101011011100001000101011110100"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000111101110110110011110110100111101100000"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000011010110010001001111111110110100110110"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000001001010010100011011100000101000010001"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000100110001010000010011001100111011111"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000010000010000011111010010011100010101"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000001010000011010010000101111100001110"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000111100110011101001110110111001100"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000010110100101011011001010100110011"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000001110110110101010100100111101111"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000000110001000100000110011100110101"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000000011001101010111010101011110100"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000000000100110100110001011010011100"},
	bitset<91>{"0000000000000000000000000000000000000000000000000000000000000000011100110101010101100010110"},
};
	const int w = 91;
	const int h = 65;
	const int b = w - h;
	const bitset<65> v("10100101111011101110100010110101110111111000000110100100010110110");
	vector<unsigned char> final_s(13, '\x00');
	for (unsigned int sol_base = 0; sol_base < (1 << 21); sol_base++) {
		bitset<91> s(sol_base);
		if (!(check_byte(s, final_s, 0) && check_byte(s, final_s, 1) && check_byte(s, final_s, 2))) {
			continue;
		}
		for (unsigned int sol_base2 = 0; sol_base2 < (1 << (b - 21)); sol_base2++) {
			bool flag = true;
			s = sol_base + (sol_base2 << 21);
			// Deal with offset of '1' at m[h-3]
			s[b + 2] = s[b - 1];
			s[b - 1] = 0;
			s[b - 1] = inner(m[h - 1], s) ^ v[0];
			s[b] = inner(m[h - 2], s) ^ v[1];
			s[b + 1] = inner(m[h - 3], s) ^ v[2];

			if (!(check_byte(s, final_s, 3))) {
				continue;
			}

			int cur_byte = 4;
			int j = 7 - ((b + 3) % 7);
			for (int i = 3; i < h; i++) {
				s[b + i] = inner(m[h - 1 - i], s) ^ v[i];
				j -= 1;
				if (j == 0) {
					if (!check_byte(s, final_s, cur_byte)) {
						flag = false;
						break;
					}
					cur_byte++;
					j = 7;
				}
			}
			if (!flag) {
				continue;
			}
			int sum = 0;
			for (int i = 0; i < 13; i++) {
				sum += final_s[i];
			}
			if (sum == 0x4d0) {
				cout << vec2string(final_s) << endl;
			}
		}
	}
}